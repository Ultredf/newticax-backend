// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  previewFeatures = []
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Rest of your schema remains the same...
enum Role {
  USER
  AUTHOR
  ADMIN
}

enum Provider {
  EMAIL
  GOOGLE
  GITHUB
}

enum Language {
  ENGLISH
  INDONESIAN
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String        @unique
  email          String        @unique
  password       String?
  image          String?
  bio            String?
  role           Role          @default(USER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  provider       Provider      @default(EMAIL)
  providerId     String?
  language       Language      @default(ENGLISH)
  
  articles       Article[]
  bookmarks      Bookmark[]
  likes          Like[]
  comments       Comment[]
  notifications  Notification[]
  readingHistory ReadHistory[]
  preference     Preference?
}

// Continue with all other models as before...
model Preference {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories     String[] @default([])
  notifications  Boolean  @default(true)
  darkMode       Boolean  @default(false)
  emailUpdates   Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Article {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String      @unique
  content       String
  summary       String
  image         String?
  source        String?
  sourceUrl     String?
  externalId    String?
  isExternal    Boolean     @default(false)
  isBreaking    Boolean     @default(false)
  isTrending    Boolean     @default(false)
  published     Boolean     @default(true)
  publishedAt   DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  authorId      String?     @db.ObjectId
  author        User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  categoryId    String?     @db.ObjectId
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags          Tag[]       @relation(fields: [tagIds], references: [id])
  tagIds        String[]    @db.ObjectId @default([])
  likes         Like[]
  comments      Comment[]
  bookmarks     Bookmark[]
  readHistory   ReadHistory[]
  language      Language    @default(ENGLISH)
  viewCount     Int         @default(0)
  shareCount    Int         @default(0)
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  slug       String    @unique
  articles   Article[] @relation(fields: [articleIds], references: [id])
  articleIds String[]  @db.ObjectId @default([])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  articleId String    @db.ObjectId
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?   @db.ObjectId
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([articleId, userId])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([articleId, userId])
}

model ReadHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())

  @@unique([articleId, userId])
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  message     String
  read        Boolean  @default(false)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedId   String?
  createdAt   DateTime @default(now())
}

model NewsApiCache {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String
  params    String
  data      String
  language  Language @default(ENGLISH)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([endpoint, params, language])
}